
// _________ _______  _______ _________   _______  _______  _______  _______  _______
// \__   __/(  ____ \(  ____ \\__   __/  (  ____ \(  ___  )(  ____ \(  ____ \(  ____ \
//    ) (   | (    \/| (    \/   ) (     | (    \/| (   ) || (    \/| (    \/| (    \/
//    | |   | (__    | (_____    | |     | |      | (___) || (_____ | (__    | (_____
//    | |   |  __)   (_____  )   | |     | |      |  ___  |(_____  )|  __)   (_____  )
//    | |   | (            ) |   | |     | |      | (   ) |      ) || (            ) |
//    | |   | (____/\/\____) |   | |     | (____/\| )   ( |/\____) || (____/\/\____) |
//    )_(   (_______/\_______)   )_(     (_______/|/     \|\_______)(_______/\_______)


const {solution} = require('./index');

describe('카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하기', () => {

    test("[10,2]는 [4,3] 리턴 한다.",()=>{
        expect(solution(10,2)).toStrictEqual([4,3]);
    });
    test("[8,1]는  [3,3] 리턴 한다.",()=>{
        expect(solution(8,1)).toStrictEqual([3,3]);

    });
    test("[24,24] 는  [8,6] 리턴 한다.",()=>{
        expect(solution(24,24)).toStrictEqual([8,6]);

    });
    test("[8,2] 는  성립 되지 않는 문제이므로 undefined 리턴 한다.",()=>{
        expect(solution(8,2)).toBe(undefined);
    });

});